import 'package:flutter/material.dart';
import 'package:file_picker/file_picker.dart';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'dart:convert';

class MalwareDetectionScreen extends StatefulWidget {
  const MalwareDetectionScreen({super.key});

  @override
  _MalwareDetectionScreenState createState() => _MalwareDetectionScreenState();
}

class _MalwareDetectionScreenState extends State<MalwareDetectionScreen> {
  File? _selectedFile;
  String _result = '';

  void _pickFile() async {
    FilePickerResult? result = await FilePicker.platform.pickFiles();
    if (result != null) {
      File file = File(result.files.single.path!);
      if (file.lengthSync() <= 30 * 1024 * 1024) {
        setState(() {
          _selectedFile = file;
          _result = 'Selected file: ${file.path}';
        });
      } else {
        setState(() {
          _result = 'File size exceeds 30MB. Please select a smaller file.';
        });
      }
    }
  }

  void _detectMalware() async {
    if (_selectedFile != null) {
      String apiUrl = 'http://127.0.0.1:5000/api';
      
      try {
        var request = http.MultipartRequest('POST', Uri.parse(apiUrl));
        request.files.add(await http.MultipartFile.fromPath('file', _selectedFile!.path));
        var response = await request.send();
        
        if (response.statusCode == 200) {
          var responseData = await http.Response.fromStream(response);
          var decodedResponse = jsonDecode(responseData.body);
          setState(() {
            _result = jsonEncode(decodedResponse, toEncodable: (dynamic value) => value.toString());
          });
        } else {
          setState(() {
            _result = 'Error: Failed to scan the file';
          });
        }
      } catch (e) {
        setState(() {
          _result = 'Error: $e';
        });
        debugPrint('Error: $e');
      }
    } else {
      setState(() {
        _result = 'No file selected. Please select a file to test.';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Malware Detection'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text(
                'Select a file to detect malware:',
                style: TextStyle(fontSize: 18),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _pickFile,
                child: const Text('Pick File'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _detectMalware,
                child: const Text('Detect'),
              ),
              const SizedBox(height: 20),
              Container(
                width: 500,
                height: 300,
                padding: const EdgeInsets.all(8.0),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: SingleChildScrollView(
                  child: Text(_result),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

void main() => runApp(const MaterialApp(
  home: MalwareDetectionScreen(),
));