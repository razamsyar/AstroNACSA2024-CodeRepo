from flask import Flask, request, jsonify
import requests
import json
import time
import base64
import hashlib
from time import sleep
from pathlib import Path
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

API_KEY_IP = "7f7fe9f967c41cc8c382dc4f7b7b4f33c1940e84ea205570f7adde9f5e6931a9"
API_KEY_URL = '25908485d1d7ca338d0e1427d00801a2180bc0090d165a60df8ce2703b88a697'
API_KEY_FILE = "b221c495a4e5654c82fbc7928804bf665d0b04d1ece9818e453c92fe8f5664a6"

def get_analysis_stats(stats):
    if stats is None:
        return "VirusTotal: No last analysis stats available."
    else:
        return {
            "malicious": stats['malicious'],
            "undetected": stats['undetected'],
            "harmless": stats['harmless'],
            "suspicious": stats['suspicious'],
            "timeout": stats['timeout']
        }

def base64_url_encode(url):
    url_bytes = url.encode('utf-8')
    base64_bytes = base64.urlsafe_b64encode(url_bytes)
    return base64_bytes.decode('utf-8').rstrip('=')

def hash_it(file, algorithm):
    if algorithm == "sha256":
        hasher = hashlib.sha256()
    elif algorithm == "sha1":
        hasher = hashlib.sha1()
    elif algorithm == "md5":
        hasher = hashlib.md5()
    else:
        raise Exception("Incompatible hash algorithm used. Choose from: sha256 | sha1 | md5")

    with open(file, 'rb') as f:
        hasher.update(f.read())
    return hasher.hexdigest()

def vt_get_data(f_hash, headers):
    url = f"https://www.virustotal.com/api/v3/files/{f_hash}"
    while True:
        response = requests.get(url, headers=headers)
        if error_handle(response):
            break
    return response

def vt_post_files(file, headers, url="https://www.virustotal.com/api/v3/files"):
    with open(file, "rb") as f:
        file_bin = f.read()
    upload_package = {"file": (file.name, file_bin)}
    while True:
        response = requests.post(url, headers=headers, files=upload_package)
        if error_handle(response):
            break
    return response

def vt_get_analyses(response, headers):
    _id = response.json().get("data").get("id")
    url = f"https://www.virustotal.com/api/v3/analyses/{_id}"
    while True:
        sleep(60)
        while True:
            response = requests.get(url, headers=headers)
            if error_handle(response):
                break
        if response.json().get("data").get("attributes").get("status") == "completed":
            f_hash = response.json().get("meta").get("file_info").get("sha256")
            return f_hash

def vt_get_upload_url(headers):
    url = "https://www.virustotal.com/api/v3/files/upload_url"
    while True:
        response = requests.get(url, headers=headers)
        if error_handle(response):
            break
    return response.json()["data"]

def error_handle(response):
    if response.status_code == 429:
        sleep(60)
    if response.status_code == 401:
        raise Exception("Invalid API key")
    elif response.status_code not in (200, 404, 429):
        raise Exception(response.status_code)
    else:
        return True
    return False

def parse_response(response):
    json_obj = response.json().get("data").get("attributes")

    output = {}

    output["name"] = json_obj.get("meaningful_name")
    output["stats"] = json_obj.get("last_analysis_stats")
    output["engine_detected"] = {}

    for engine in json_obj.get("last_analysis_results").keys():
        if json_obj.get("last_analysis_results").get(engine).get("category") != "undetected":
            output.get("engine_detected")[engine] = {}
            output.get("engine_detected")[engine]["category"] = json_obj.get("last_analysis_results").get(engine).get("category")
            output.get("engine_detected")[engine]["result"] = json_obj.get("last_analysis_results").get(engine).get("result")

    output["votes"] = json_obj.get("total_votes")
    output["hash"] = {"sha1": json_obj.get("sha1"), "sha256": json_obj.get("sha256")}
    output["size"] = json_obj.get("size")
    return output

@app.route('/api', methods=['GET', 'POST'])
def combined_route():
    if request.method == 'GET':
        # Your existing GET handling code
        if 'ip' in request.args:
            ip_add = request.args.get('ip')
            if not ip_add:
                return jsonify({'error': 'IP address is required'}), 400

            url = f"https://www.virustotal.com/api/v3/ip_addresses/{ip_add}"
            headers = {
                "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0",
                "x-apikey": API_KEY_IP
            }
            
            response = requests.get(url, headers=headers)
            
            try:
                response_data = response.json()
            except ValueError:
                print("Response content:", response.text)
                return jsonify({'error': 'Failed to parse response from VirusTotal', 'content': response.text}), 500

            if "data" not in response_data or "attributes" not in response_data["data"]:
                print("Invalid response structure:", response_data)
                return jsonify({'error': 'Invalid response structure from VirusTotal'}), 500

            dict_web = response_data["data"]["attributes"]["last_analysis_results"]
            tot_engine_c = 0
            tot_detect_c = 0
            result_eng = []
            eng_name = []

            for i in dict_web:
                tot_engine_c += 1
                if dict_web[i]["category"] in ["malicious", "suspicious"]:
                    result_eng.append(dict_web[i]["result"])
                    eng_name.append(dict_web[i]["engine_name"])
                    tot_detect_c += 1

            result_eng = list(set(result_eng))

            if tot_detect_c > 0:
                result = f"The IP {ip_add} was rated as {', '.join(result_eng)} on {tot_detect_c} engine(s) out of {tot_engine_c} engines. The engines which reported this are: {', '.join(eng_name)}."
            else:
                result = f"The IP {ip_add} has been marked harmless and clean on VirusTotal."

            return jsonify({'result': result})
        
        elif 'url' in request.args:
            url = request.args.get('url')
            if not url:
                return jsonify({"error": "No URL provided"}), 400

            encoded_url = base64_url_encode(url)
            headers = {'x-apikey': API_KEY_URL}
            response = requests.get(f"https://www.virustotal.com/api/v3/urls/{encoded_url}", headers=headers)
            response_data = json.loads(response.text)

            if response.status_code == 200:
                attributes = response_data['data']['attributes']
                stats = attributes['last_analysis_stats']
                return jsonify(get_analysis_stats(stats))
            elif response.status_code == 404:
                headers = {'x-apikey': API_KEY_URL, 'Content-Type': 'application/x-www-form-urlencoded'}
                response = requests.post("https://www.virustotal.com/api/v3/urls", headers=headers, data=f"url={url}")
                response_data = json.loads(response.text)

                if response.status_code == 200:
                    data_id = response_data['data']['id']

                    while True:
                        time.sleep(30)
                        response = requests.get(f"https://www.virustotal.com/api/v3/analyses/{data_id}", headers=headers)
                        response_data = json.loads(response.text)
                        if response.status_code == 200:
                            attributes = response_data['data']['attributes']
                            stats = attributes['stats']
                            if attributes['status'] == 'completed':
                                return jsonify(get_analysis_stats(stats))
                        else:
                            return jsonify({"error": f"Error occurred. Status code: {response.status_code}. Message: {response_data['error']['message']}"})
                else:
                    return jsonify({"error": f"Error occurred. Status code: {response.status_code}. Message: {response_data['error']['message']}"})
            else:
                return jsonify({"error": f"Error occurred. Status code: {response.status_code}. Message: {response_data['error']['message']}"})

    elif request.method == 'POST':
        if 'file' in request.files:
            file = request.files['file']
            if file.filename == '':
                return jsonify({"error": "No selected file"}), 400

            file_path = Path(file.filename).resolve()  # Make sure the path is absolute
            file.save(str(file_path))  # Convert Path object to string

            f_hash = hash_it(file_path, "sha256")

            headers = {"x-apikey": API_KEY_FILE}
            response = vt_get_data(f_hash, headers)

            if response.status_code == 404:
                if file_path.stat().st_size > 32000000:
                    response = vt_get_data(vt_get_analyses(vt_post_files(file_path, headers, vt_get_upload_url(headers)), headers), headers)
                else:
                    response = vt_get_data(vt_get_analyses(vt_post_files(file_path, headers), headers), headers)

            if response.status_code == 200:
                parsed_response = parse_response(response)
                return jsonify(parsed_response), 200
            else:
                return jsonify({"error": response.status_code}), response.status_code

        return jsonify({"error": "Invalid request"}), 400
    
API_KEY = '540b085d3aeaaf314c12ae782b31c5b5ae1740db7466c5406bf33b2ab051a63276b540624d9b534e'
URL = 'https://www.abuseipdb.com/api/v2/report'

def report_phishing_ip(api_key, ip_address, categories, comment):
    headers = {
        'Accept': 'application/json',
        'Key': api_key
    }
    data = {
        'ip': ip_address,
        'categories': categories,
        'comment': comment
    }

    response = requests.post(URL, headers=headers, data=data)
    return response

@app.route('/report-ip', methods=['POST'])
def report_ip():
    if request.method == 'POST':
        ip_address = request.json.get('ip')
        categories = '14'  # Category for Phishing
        comment = 'Phishing site detected'

        response = report_phishing_ip(API_KEY, ip_address, categories, comment)
        result = response.json()

        if response.status_code == 200:
            return jsonify({"message": f"The IP address '{ip_address}' has been reported. Response: {result}"}), 200
        else:
            return jsonify({"error": f"Failed to report the IP address '{ip_address}'. Status code: {response.status_code}. Response: {result}"}), response.status_code

    return jsonify({"error": "Method not allowed"}), 405

if __name__ == '__main__':
    app.run(host="127.0.0.1", port=5000)
